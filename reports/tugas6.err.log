Traceback (most recent call last):
<<<<<<< HEAD
  File "C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
=======
  File "C:\Users\vanisa\AppData\Roaming\Python\Python313\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
>>>>>>> f44904a (Tambah)
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
<<<<<<< HEAD
  File "C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\asyncio\base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd

df = pd.read_csv("ecoli_original.csv")

print("Info dataset:")
print(df.info())
print("\nCek nilai kosong:")
print(df.isnull().sum())

X = df.drop(columns=['sequence_name','class'])
y = df['class']

X.to_csv("ecoli_features.csv", index=False)
y.to_csv("ecoli_labels.csv", index=False)
print("\nData numerik & label sudah dipisah.")

=======
  File "C:\Users\vanisa\AppData\Local\Programs\Python\Python313\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "C:\Users\vanisa\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\vanisa\AppData\Roaming\Python\Python313\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\vanisa\AppData\Local\Programs\Python\Python313\Lib\asyncio\base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "C:\Users\vanisa\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "C:\Users\vanisa\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\vanisa\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
adasyn = ADASYN(random_state=42, n_neighbors=1)
X_res, y_res = adasyn.fit_resample(X_scaled, y_enc)

synthetic_mask = np.array([not np.any(np.all(np.isclose(X_scaled, r, atol=1e-8), axis=1)) for r in X_res])
y_labels = le.inverse_transform(y_res)

pca = PCA(n_components=2, random_state=42)
X_pca = pca.fit_transform(X_res)

plt.figure(figsize=(8,6))
colors = plt.cm.get_cmap("tab20", len(le.classes_))

for i, cls in enumerate(le.classes_):
    idx_orig = (y_labels == cls) & (~synthetic_mask)
    plt.scatter(X_pca[idx_orig,0], X_pca[idx_orig,1], label=f"{cls} (original)", color=colors(i), s=50, alpha=0.7)

    idx_syn = (y_labels == cls) & (synthetic_mask)
    plt.scatter(X_pca[idx_syn,0], X_pca[idx_syn,1], label=f"{cls} (synthetic)", color=colors(i), s=80, marker='X')

plt.title("PCA 2D After ADASYN - Ecoli Dataset")
plt.xlabel("PC1")
plt.ylabel("PC2")
plt.legend(bbox_to_anchor=(1.05,1), loc="upper left", fontsize='small')
plt.tight_layout()
plt.show()
>>>>>>> f44904a (Tambah)
------------------


[31m---------------------------------------------------------------------------[39m
<<<<<<< HEAD
[31mFileNotFoundError[39m                         Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[3][39m[32m, line 3[39m
[32m      1[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mpd[39;00m
[32m----> [39m[32m3[39m df = [43mpd[49m[43m.[49m[43mread_csv[49m[43m([49m[33;43m"[39;49m[33;43mecoli_original.csv[39;49m[33;43m"[39;49m[43m)[49m
[32m      5[39m [38;5;28mprint[39m([33m"[39m[33mInfo dataset:[39m[33m"[39m)
[32m      6[39m [38;5;28mprint[39m(df.info())

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\io\parsers\readers.py:948[39m, in [36mread_csv[39m[34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)[39m
[32m    935[39m kwds_defaults = _refine_defaults_read(
[32m    936[39m     dialect,
[32m    937[39m     delimiter,
[32m   (...)[39m[32m    944[39m     dtype_backend=dtype_backend,
[32m    945[39m )
[32m    946[39m kwds.update(kwds_defaults)
[32m--> [39m[32m948[39m [38;5;28;01mreturn[39;00m [43m_read[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[43mkwds[49m[43m)[49m

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\io\parsers\readers.py:611[39m, in [36m_read[39m[34m(filepath_or_buffer, kwds)[39m
[32m    608[39m _validate_names(kwds.get([33m"[39m[33mnames[39m[33m"[39m, [38;5;28;01mNone[39;00m))
[32m    610[39m [38;5;66;03m# Create the parser.[39;00m
[32m--> [39m[32m611[39m parser = [43mTextFileReader[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwds[49m[43m)[49m
[32m    613[39m [38;5;28;01mif[39;00m chunksize [38;5;129;01mor[39;00m iterator:
[32m    614[39m     [38;5;28;01mreturn[39;00m parser

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\io\parsers\readers.py:1448[39m, in [36mTextFileReader.__init__[39m[34m(self, f, engine, **kwds)[39m
[32m   1445[39m     [38;5;28mself[39m.options[[33m"[39m[33mhas_index_names[39m[33m"[39m] = kwds[[33m"[39m[33mhas_index_names[39m[33m"[39m]
[32m   1447[39m [38;5;28mself[39m.handles: IOHandles | [38;5;28;01mNone[39;00m = [38;5;28;01mNone[39;00m
[32m-> [39m[32m1448[39m [38;5;28mself[39m._engine = [38;5;28;43mself[39;49m[43m.[49m[43m_make_engine[49m[43m([49m[43mf[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m.[49m[43mengine[49m[43m)[49m

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\io\parsers\readers.py:1705[39m, in [36mTextFileReader._make_engine[39m[34m(self, f, engine)[39m
[32m   1703[39m     [38;5;28;01mif[39;00m [33m"[39m[33mb[39m[33m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[32m   1704[39m         mode += [33m"[39m[33mb[39m[33m"[39m
[32m-> [39m[32m1705[39m [38;5;28mself[39m.handles = [43mget_handle[49m[43m([49m
[32m   1706[39m [43m    [49m[43mf[49m[43m,[49m
[32m   1707[39m [43m    [49m[43mmode[49m[43m,[49m
[32m   1708[39m [43m    [49m[43mencoding[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mencoding[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[32m   1709[39m [43m    [49m[43mcompression[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mcompression[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[32m   1710[39m [43m    [49m[43mmemory_map[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mmemory_map[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m[43m,[49m
[32m   1711[39m [43m    [49m[43mis_text[49m[43m=[49m[43mis_text[49m[43m,[49m
[32m   1712[39m [43m    [49m[43merrors[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mencoding_errors[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mstrict[39;49m[33;43m"[39;49m[43m)[49m[43m,[49m
[32m   1713[39m [43m    [49m[43mstorage_options[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mstorage_options[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[32m   1714[39m [43m[49m[43m)[49m
[32m   1715[39m [38;5;28;01massert[39;00m [38;5;28mself[39m.handles [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[32m   1716[39m f = [38;5;28mself[39m.handles.handle

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python311\Lib\site-packages\pandas\io\common.py:863[39m, in [36mget_handle[39m[34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[39m
[32m    858[39m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(handle, [38;5;28mstr[39m):
[32m    859[39m     [38;5;66;03m# Check whether the filename is to be opened in binary mode.[39;00m
[32m    860[39m     [38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.[39;00m
[32m    861[39m     [38;5;28;01mif[39;00m ioargs.encoding [38;5;129;01mand[39;00m [33m"[39m[33mb[39m[33m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m ioargs.mode:
[32m    862[39m         [38;5;66;03m# Encoding[39;00m
[32m--> [39m[32m863[39m         handle = [38;5;28;43mopen[39;49m[43m([49m
[32m    864[39m [43m            [49m[43mhandle[49m[43m,[49m
[32m    865[39m [43m            [49m[43mioargs[49m[43m.[49m[43mmode[49m[43m,[49m
[32m    866[39m [43m            [49m[43mencoding[49m[43m=[49m[43mioargs[49m[43m.[49m[43mencoding[49m[43m,[49m
[32m    867[39m [43m            [49m[43merrors[49m[43m=[49m[43merrors[49m[43m,[49m
[32m    868[39m [43m            [49m[43mnewline[49m[43m=[49m[33;43m"[39;49m[33;43m"[39;49m[43m,[49m
[32m    869[39m [43m        [49m[43m)[49m
[32m    870[39m     [38;5;28;01melse[39;00m:
[32m    871[39m         [38;5;66;03m# Binary mode[39;00m
[32m    872[39m         handle = [38;5;28mopen[39m(handle, ioargs.mode)

[31mFileNotFoundError[39m: [Errno 2] No such file or directory: 'ecoli_original.csv'
=======
[31mRuntimeError[39m                              Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[21][39m[32m, line 2[39m
[32m      1[39m adasyn = ADASYN(random_state=[32m42[39m, n_neighbors=[32m1[39m)
[32m----> [39m[32m2[39m X_res, y_res = [43madasyn[49m[43m.[49m[43mfit_resample[49m[43m([49m[43mX_scaled[49m[43m,[49m[43m [49m[43my_enc[49m[43m)[49m
[32m      4[39m synthetic_mask = np.array([[38;5;129;01mnot[39;00m np.any(np.all(np.isclose(X_scaled, r, atol=[32m1e-8[39m), axis=[32m1[39m)) [38;5;28;01mfor[39;00m r [38;5;129;01min[39;00m X_res])
[32m      5[39m y_labels = le.inverse_transform(y_res)

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python313\Lib\site-packages\imblearn\base.py:202[39m, in [36mBaseSampler.fit_resample[39m[34m(self, X, y, **params)[39m
[32m    181[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mfit_resample[39m([38;5;28mself[39m, X, y, **params):
[32m    182[39m [38;5;250m    [39m[33;03m"""Resample the dataset.[39;00m
[32m    183[39m 
[32m    184[39m [33;03m    Parameters[39;00m
[32m   (...)[39m[32m    200[39m [33;03m        The corresponding label of `X_resampled`.[39;00m
[32m    201[39m [33;03m    """[39;00m
[32m--> [39m[32m202[39m     [38;5;28;01mreturn[39;00m [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[43m.[49m[43mfit_resample[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mparams[49m[43m)[49m

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python313\Lib\site-packages\sklearn\base.py:1365[39m, in [36m_fit_context.<locals>.decorator.<locals>.wrapper[39m[34m(estimator, *args, **kwargs)[39m
[32m   1358[39m     estimator._validate_params()
[32m   1360[39m [38;5;28;01mwith[39;00m config_context(
[32m   1361[39m     skip_parameter_validation=(
[32m   1362[39m         prefer_skip_nested_validation [38;5;129;01mor[39;00m global_skip_validation
[32m   1363[39m     )
[32m   1364[39m ):
[32m-> [39m[32m1365[39m     [38;5;28;01mreturn[39;00m [43mfit_method[49m[43m([49m[43mestimator[49m[43m,[49m[43m [49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python313\Lib\site-packages\imblearn\base.py:105[39m, in [36mSamplerMixin.fit_resample[39m[34m(self, X, y, **params)[39m
[32m     99[39m X, y, binarize_y = [38;5;28mself[39m._check_X_y(X, y)
[32m    101[39m [38;5;28mself[39m.sampling_strategy_ = check_sampling_strategy(
[32m    102[39m     [38;5;28mself[39m.sampling_strategy, y, [38;5;28mself[39m._sampling_type
[32m    103[39m )
[32m--> [39m[32m105[39m output = [38;5;28;43mself[39;49m[43m.[49m[43m_fit_resample[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mparams[49m[43m)[49m
[32m    107[39m y_ = (
[32m    108[39m     label_binarize(output[[32m1[39m], classes=np.unique(y)) [38;5;28;01mif[39;00m binarize_y [38;5;28;01melse[39;00m output[[32m1[39m]
[32m    109[39m )
[32m    111[39m X_, y_ = arrays_transformer.transform(output[[32m0[39m], y_)

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python313\Lib\site-packages\imblearn\over_sampling\_adasyn.py:161[39m, in [36mADASYN._fit_resample[39m[34m(self, X, y)[39m
[32m    159[39m ratio_nn = np.sum(y[nns] != class_sample, axis=[32m1[39m) / n_neighbors
[32m    160[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m np.sum(ratio_nn):
[32m--> [39m[32m161[39m     [38;5;28;01mraise[39;00m [38;5;167;01mRuntimeError[39;00m(
[32m    162[39m         [33m"[39m[33mNot any neigbours belong to the majority[39m[33m"[39m
[32m    163[39m         [33m"[39m[33m class. This case will induce a NaN case[39m[33m"[39m
[32m    164[39m         [33m"[39m[33m with a division by zero. ADASYN is not[39m[33m"[39m
[32m    165[39m         [33m"[39m[33m suited for this specific dataset.[39m[33m"[39m
[32m    166[39m         [33m"[39m[33m Use SMOTE instead.[39m[33m"[39m
[32m    167[39m     )
[32m    168[39m ratio_nn /= np.sum(ratio_nn)
[32m    169[39m n_samples_generate = np.rint(ratio_nn * n_samples).astype([38;5;28mint[39m)

[31mRuntimeError[39m: Not any neigbours belong to the majority class. This case will induce a NaN case with a division by zero. ADASYN is not suited for this specific dataset. Use SMOTE instead.
>>>>>>> f44904a (Tambah)

